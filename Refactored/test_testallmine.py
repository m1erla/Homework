# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from pathlib import Path
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from webdriver_manager.chrome import ChromeDriverManager
from datetime import date
class TestTestallmine():
  def waitForElementVisible(self,locator,timeout=3):
    WebDriverWait(self.driver,timeout).until(expected_conditions.visibility_of_element_located(locator))
  def setup_method(self, method):
    self.driver = webdriver.Chrome(ChromeDriverManager().install())
    self.driver.get("https://www.saucedemo.com/")
    self.driver.maximize_window()
    self.folderPath = str(date.today())
    Path(self.folderPath).mkdir(exist_ok=True)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_testallmine(self):
    self.waitForElementVisible((By.CSS_SELECTOR, "*[data-test=\"username\"]"))
    self.waitForElementVisible((By.CSS_SELECTOR, "*[data-test=\"password\"]"))
    self.waitForElementVisible((By.CSS_SELECTOR, "*[data-test=\"login-button\"]"))
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"login-button\"]").click()
    self.waitForElementVisible((By.CSS_SELECTOR, "*[data-test=\"error\"]"))
    self.driver.save_screenshot(f"{self.folderPath}/test-all-mine.png")
    assert self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"error\"]").text == "Epic sadface: Username is required"
  def test_password_login(self):  
    self.waitForElementVisible((By.CSS_SELECTOR, "*[data-test=\"username\"]"))
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").send_keys("standard_user")
    self.waitForElementVisible((By.CSS_SELECTOR, "*[data-test=\"password\"]"))
    self.waitForElementVisible((By.CSS_SELECTOR, "*[data-test=\"login-button\"]"))
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"login-button\"]").click()
    self.waitForElementVisible((By.CSS_SELECTOR, "*[data-test=\"error\"]"))
    self.driver.save_screenshot(f"{self.folderPath}/test-all-mine.png")
    assert self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"error\"]").text == "Epic sadface: Password is required"
    self.driver.find_element(By.CSS_SELECTOR, ".login_wrapper-inner").click()
  def test_locked_user(self):
    self.waitForElementVisible((By.CSS_SELECTOR, "*[data-test=\"username\"]"))
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").send_keys("locked_out_user")
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]").send_keys("secret_sauce")
    self.waitForElementVisible((By.CSS_SELECTOR, "*[data-test=\"password\"]"))
    self.waitForElementVisible((By.CSS_SELECTOR, "*[data-test=\"login-button\"]"))
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"login-button\"]").click()
    self.waitForElementVisible((By.CSS_SELECTOR, "*[data-test=\"error\"]"))
    self.driver.save_screenshot(f"{self.folderPath}/test-all-mine.png")
    assert self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"error\"]").text == "Epic sadface: Sorry, this user has been locked out."
  def test_not_match(self):  
    self.waitForElementVisible((By.CSS_SELECTOR, "*[data-test=\"username\"]"))
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").send_keys("1")
    self.waitForElementVisible((By.CSS_SELECTOR, "*[data-test=\"password\"]"))
    self.driver.find_element(By.CSS_SELECTOR, ".login_wrapper-inner").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]").send_keys("1")
    self.waitForElementVisible((By.CSS_SELECTOR, "*[data-test=\"login-button\"]"))
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"login-button\"]").click()
    self.waitForElementVisible((By.CSS_SELECTOR, "*[data-test=\"error\"]"))
    self.driver.save_screenshot(f"{self.folderPath}/test-all-mine.png")
    assert self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"error\"]").text == "Epic sadface: Username and password do not match any user in this service"
  
